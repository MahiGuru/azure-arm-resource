/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Bot as BotMapper, CheckNameAvailabilityRequestBody as CheckNameAvailabilityRequestBodyMapper, BotChannel as BotChannelMapper, SiteInfo as SiteInfoMapper, ConnectionSetting as ConnectionSettingMapper, QnAMakerEndpointKeysRequestBody as QnAMakerEndpointKeysRequestBodyMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: BotMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-09-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: ["options", "location"],
    mapper: BotMapper
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: BotMapper
};
export const sku = {
    parameterPath: ["options", "sku"],
    mapper: BotMapper
};
export const kind = {
    parameterPath: ["options", "kind"],
    mapper: BotMapper
};
export const etag = {
    parameterPath: ["options", "etag"],
    mapper: BotMapper
};
export const properties = {
    parameterPath: ["options", "properties"],
    mapper: BotMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityRequestBodyMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: BotChannelMapper
};
export const channelName = {
    parameterPath: "channelName",
    mapper: {
        serializedName: "channelName",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "AlexaChannel",
                "FacebookChannel",
                "EmailChannel",
                "KikChannel",
                "TelegramChannel",
                "SlackChannel",
                "MsTeamsChannel",
                "SkypeChannel",
                "WebChatChannel",
                "DirectLineChannel",
                "SmsChannel",
                "LineChannel",
                "DirectLineSpeechChannel",
                "OutlookChannel",
                "Omnichannel",
                "TelephonyChannel",
                "AcsChatChannel",
                "SearchAssistant",
                "M365Extensions"
            ]
        }
    }
};
export const location1 = {
    parameterPath: ["options", "location"],
    mapper: BotChannelMapper
};
export const tags1 = {
    parameterPath: ["options", "tags"],
    mapper: BotChannelMapper
};
export const sku1 = {
    parameterPath: ["options", "sku"],
    mapper: BotChannelMapper
};
export const kind1 = {
    parameterPath: ["options", "kind"],
    mapper: BotChannelMapper
};
export const etag1 = {
    parameterPath: ["options", "etag"],
    mapper: BotChannelMapper
};
export const properties1 = {
    parameterPath: ["options", "properties"],
    mapper: BotChannelMapper
};
export const channelName1 = {
    parameterPath: "channelName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "channelName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: SiteInfoMapper
};
export const channelName2 = {
    parameterPath: "channelName",
    mapper: {
        serializedName: "channelName",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["WebChatChannel", "DirectLineChannel"]
        }
    }
};
export const connectionName = {
    parameterPath: "connectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][\\sa-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: ConnectionSettingMapper
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: QnAMakerEndpointKeysRequestBodyMapper
};
export const operationResultId = {
    parameterPath: "operationResultId",
    mapper: {
        serializedName: "operationResultId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties2 = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
//# sourceMappingURL=parameters.js.map
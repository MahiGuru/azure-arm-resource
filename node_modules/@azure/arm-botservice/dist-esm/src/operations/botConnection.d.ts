import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BotConnection } from "../operationsInterfaces";
import { AzureBotService } from "../azureBotService";
import { ConnectionSetting, BotConnectionListByBotServiceOptionalParams, BotConnectionListServiceProvidersOptionalParams, BotConnectionListServiceProvidersResponse, BotConnectionListWithSecretsOptionalParams, BotConnectionListWithSecretsResponse, BotConnectionCreateOptionalParams, BotConnectionCreateResponse, BotConnectionUpdateOptionalParams, BotConnectionUpdateResponse, BotConnectionGetOptionalParams, BotConnectionGetResponse, BotConnectionDeleteOptionalParams } from "../models";
/** Class containing BotConnection operations. */
export declare class BotConnectionImpl implements BotConnection {
    private readonly client;
    /**
     * Initialize a new instance of the class BotConnection class.
     * @param client Reference to the service client
     */
    constructor(client: AzureBotService);
    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByBotService(resourceGroupName: string, resourceName: string, options?: BotConnectionListByBotServiceOptionalParams): PagedAsyncIterableIterator<ConnectionSetting>;
    private listByBotServicePagingPage;
    private listByBotServicePagingAll;
    /**
     * Lists the available Service Providers for creating Connection Settings
     * @param options The options parameters.
     */
    listServiceProviders(options?: BotConnectionListServiceProvidersOptionalParams): Promise<BotConnectionListServiceProvidersResponse>;
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    listWithSecrets(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionListWithSecretsOptionalParams): Promise<BotConnectionListWithSecretsResponse>;
    /**
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for creating the Connection Setting.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceName: string, connectionName: string, parameters: ConnectionSetting, options?: BotConnectionCreateOptionalParams): Promise<BotConnectionCreateResponse>;
    /**
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for updating the Connection Setting.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, resourceName: string, connectionName: string, parameters: ConnectionSetting, options?: BotConnectionUpdateOptionalParams): Promise<BotConnectionUpdateResponse>;
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionGetOptionalParams): Promise<BotConnectionGetResponse>;
    /**
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionDeleteOptionalParams): Promise<void>;
    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    private _listByBotService;
    /**
     * ListByBotServiceNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param nextLink The nextLink from the previous successful call to the ListByBotService method.
     * @param options The options parameters.
     */
    private _listByBotServiceNext;
}
//# sourceMappingURL=botConnection.d.ts.map
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Channels operations. */
export class ChannelsImpl {
    /**
     * Initialize a new instance of the class Channels class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, resourceName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, resourceName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, resourceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroup(resourceGroupName, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, channelName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, parameters, options }, createOperationSpec);
    }
    /**
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, updateOperationSpec);
    }
    /**
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, deleteOperationSpec);
    }
    /**
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, getOperationSpec);
    }
    /**
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    listWithKeys(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, listWithKeysOperationSpec);
    }
    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.BotChannel
        },
        201: {
            bodyMapper: Mappers.BotChannel
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.parameters3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.channelName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.BotChannel
        },
        201: {
            bodyMapper: Mappers.BotChannel
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: {
        parameterPath: {
            location: ["options", "location"],
            tags: ["options", "tags"],
            sku: ["options", "sku"],
            kind: ["options", "kind"],
            etag: ["options", "etag"],
            properties: ["options", "properties"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.BotChannel), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.channelName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.channelName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BotChannel
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.channelName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listWithKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ListChannelWithKeysResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.channelName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChannelResponseList
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ChannelResponseList
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=channels.js.map
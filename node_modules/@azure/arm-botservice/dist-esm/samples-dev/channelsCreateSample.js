/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureBotService } from "@azure/arm-botservice";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a Channel registration for a Bot Service
 *
 * @summary Creates a Channel registration for a Bot Service
 * x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/stable/2022-09-15/examples/PutAlexaChannel.json
 */
function createAlexaChannel() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BOTSERVICE_SUBSCRIPTION_ID"] || "subscription-id";
        const resourceGroupName = process.env["BOTSERVICE_RESOURCE_GROUP"] || "OneResourceGroupName";
        const resourceName = "samplebotname";
        const channelName = "AlexaChannel";
        const parameters = {
            location: "global",
            properties: {
                channelName: "AlexaChannel",
                properties: { alexaSkillId: "XAlexaSkillIdX", isEnabled: true }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureBotService(credential, subscriptionId);
        const result = yield client.channels.create(resourceGroupName, resourceName, channelName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a Channel registration for a Bot Service
 *
 * @summary Creates a Channel registration for a Bot Service
 * x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/stable/2022-09-15/examples/PutChannel.json
 */
function createChannel() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BOTSERVICE_SUBSCRIPTION_ID"] || "subscription-id";
        const resourceGroupName = process.env["BOTSERVICE_RESOURCE_GROUP"] || "OneResourceGroupName";
        const resourceName = "samplebotname";
        const channelName = "EmailChannel";
        const parameters = {
            location: "global",
            properties: {
                channelName: "EmailChannel",
                properties: { emailAddress: "a@b.com", isEnabled: true, password: "pwd" }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureBotService(credential, subscriptionId);
        const result = yield client.channels.create(resourceGroupName, resourceName, channelName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a Channel registration for a Bot Service
 *
 * @summary Creates a Channel registration for a Bot Service
 * x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/stable/2022-09-15/examples/PutDirectLineSpeechChannel.json
 */
function createDirectLineSpeechChannel() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BOTSERVICE_SUBSCRIPTION_ID"] || "subscription-id";
        const resourceGroupName = process.env["BOTSERVICE_RESOURCE_GROUP"] || "OneResourceGroupName";
        const resourceName = "samplebotname";
        const channelName = "DirectLineSpeechChannel";
        const parameters = {
            location: "global",
            properties: {
                channelName: "DirectLineSpeechChannel",
                properties: {
                    cognitiveServiceRegion: "XcognitiveServiceRegionX",
                    cognitiveServiceSubscriptionKey: "XcognitiveServiceSubscriptionKeyX",
                    isEnabled: true
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureBotService(credential, subscriptionId);
        const result = yield client.channels.create(resourceGroupName, resourceName, channelName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a Channel registration for a Bot Service
 *
 * @summary Creates a Channel registration for a Bot Service
 * x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/stable/2022-09-15/examples/PutEmailChannel.json
 */
function createEmailChannel() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BOTSERVICE_SUBSCRIPTION_ID"] || "subscription-id";
        const resourceGroupName = process.env["BOTSERVICE_RESOURCE_GROUP"] || "OneResourceGroupName";
        const resourceName = "samplebotname";
        const channelName = "EmailChannel";
        const parameters = {
            location: "global",
            properties: {
                channelName: "EmailChannel",
                properties: {
                    authMethod: 1,
                    emailAddress: "a@b.com",
                    isEnabled: true,
                    magicCode: "000000"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureBotService(credential, subscriptionId);
        const result = yield client.channels.create(resourceGroupName, resourceName, channelName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a Channel registration for a Bot Service
 *
 * @summary Creates a Channel registration for a Bot Service
 * x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/stable/2022-09-15/examples/PutLineChannel.json
 */
function createLineChannel() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BOTSERVICE_SUBSCRIPTION_ID"] || "subscription-id";
        const resourceGroupName = process.env["BOTSERVICE_RESOURCE_GROUP"] || "OneResourceGroupName";
        const resourceName = "samplebotname";
        const channelName = "LineChannel";
        const parameters = {
            location: "global",
            properties: {
                channelName: "LineChannel",
                properties: {
                    lineRegistrations: [
                        {
                            channelAccessToken: "channelAccessToken",
                            channelSecret: "channelSecret"
                        }
                    ]
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureBotService(credential, subscriptionId);
        const result = yield client.channels.create(resourceGroupName, resourceName, channelName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createAlexaChannel();
        createChannel();
        createDirectLineSpeechChannel();
        createEmailChannel();
        createLineChannel();
    });
}
main().catch(console.error);
//# sourceMappingURL=channelsCreateSample.js.map
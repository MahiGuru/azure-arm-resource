import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** AcsChat channel definition */
export declare interface AcsChatChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "AcsChatChannel";
}

/** Alexa channel definition */
export declare interface AlexaChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "AlexaChannel";
    /** The set of properties specific to Alexa channel resource */
    properties?: AlexaChannelProperties;
}

/** The parameters to provide for the Alexa channel. */
export declare interface AlexaChannelProperties {
    /** The Alexa skill Id */
    alexaSkillId: string;
    /**
     * Url fragment used in part of the Uri configured in Alexa
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urlFragment?: string;
    /**
     * Full Uri used to configured the skill in Alexa
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceEndpointUri?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

export declare class AzureBotService extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureBotService class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureBotServiceOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    bots: Bots;
    channels: Channels;
    directLine: DirectLine;
    email: Email;
    operations: Operations;
    botConnection: BotConnection;
    qnAMakerEndpointKeys: QnAMakerEndpointKeys;
    hostSettings: HostSettings;
    operationResults: OperationResults;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
}

/** Optional parameters. */
export declare interface AzureBotServiceOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Bot resource definition */
export declare interface Bot extends Resource {
    /** The set of properties specific to bot resource */
    properties?: BotProperties;
}

/** Bot channel resource definition */
export declare interface BotChannel extends Resource {
    /** The set of properties specific to bot channel resource */
    properties?: ChannelUnion;
}

/** Interface representing a BotConnection. */
export declare interface BotConnection {
    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByBotService(resourceGroupName: string, resourceName: string, options?: BotConnectionListByBotServiceOptionalParams): PagedAsyncIterableIterator<ConnectionSetting>;
    /**
     * Lists the available Service Providers for creating Connection Settings
     * @param options The options parameters.
     */
    listServiceProviders(options?: BotConnectionListServiceProvidersOptionalParams): Promise<BotConnectionListServiceProvidersResponse>;
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    listWithSecrets(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionListWithSecretsOptionalParams): Promise<BotConnectionListWithSecretsResponse>;
    /**
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for creating the Connection Setting.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceName: string, connectionName: string, parameters: ConnectionSetting, options?: BotConnectionCreateOptionalParams): Promise<BotConnectionCreateResponse>;
    /**
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for updating the Connection Setting.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, resourceName: string, connectionName: string, parameters: ConnectionSetting, options?: BotConnectionUpdateOptionalParams): Promise<BotConnectionUpdateResponse>;
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionGetOptionalParams): Promise<BotConnectionGetResponse>;
    /**
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, connectionName: string, options?: BotConnectionDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BotConnectionCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type BotConnectionCreateResponse = ConnectionSetting;

/** Optional parameters. */
export declare interface BotConnectionDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BotConnectionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BotConnectionGetResponse = ConnectionSetting;

/** Optional parameters. */
export declare interface BotConnectionListByBotServiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBotServiceNext operation. */
export declare type BotConnectionListByBotServiceNextResponse = ConnectionSettingResponseList;

/** Optional parameters. */
export declare interface BotConnectionListByBotServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBotService operation. */
export declare type BotConnectionListByBotServiceResponse = ConnectionSettingResponseList;

/** Optional parameters. */
export declare interface BotConnectionListServiceProvidersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listServiceProviders operation. */
export declare type BotConnectionListServiceProvidersResponse = ServiceProviderResponseList;

/** Optional parameters. */
export declare interface BotConnectionListWithSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listWithSecrets operation. */
export declare type BotConnectionListWithSecretsResponse = ConnectionSetting;

/** Optional parameters. */
export declare interface BotConnectionUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type BotConnectionUpdateResponse = ConnectionSetting;

/** The parameters to provide for the Bot. */
export declare interface BotProperties {
    /** The Name of the bot */
    displayName: string;
    /** The description of the bot */
    description?: string;
    /** The Icon Url of the bot */
    iconUrl?: string;
    /** The bot's endpoint */
    endpoint: string | null;
    /**
     * The bot's endpoint version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpointVersion?: string;
    /** Contains resource all settings defined as key/value pairs. */
    allSettings?: {
        [propertyName: string]: string;
    };
    /** Contains resource parameters defined as key/value pairs. */
    parameters?: {
        [propertyName: string]: string;
    };
    /** The bot's manifest url */
    manifestUrl?: string;
    /** Microsoft App Type for the bot */
    msaAppType?: MsaAppType;
    /** Microsoft App Id for the bot */
    msaAppId: string;
    /** Microsoft App Tenant Id for the bot */
    msaAppTenantId?: string;
    /** Microsoft App Managed Identity Resource Id for the bot */
    msaAppMSIResourceId?: string;
    /**
     * Collection of channels for which the bot is configured
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly configuredChannels?: string[];
    /**
     * Collection of channels for which the bot is enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enabledChannels?: string[];
    /** The Application Insights key */
    developerAppInsightKey?: string;
    /** The Application Insights Api Key */
    developerAppInsightsApiKey?: string;
    /** The Application Insights App Id */
    developerAppInsightsApplicationId?: string;
    /** Collection of LUIS App Ids */
    luisAppIds?: string[];
    /** The LUIS Key */
    luisKey?: string;
    /** Whether Cmek is enabled */
    isCmekEnabled?: boolean;
    /** The CMK Url */
    cmekKeyVaultUrl?: string;
    /**
     * The CMK encryption status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cmekEncryptionStatus?: string;
    /** The Tenant Id for the bot */
    tenantId?: string;
    /** Whether the bot is in an isolated network */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Whether the bot is streaming supported */
    isStreamingSupported?: boolean;
    /**
     * Whether the bot is developerAppInsightsApiKey set
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDeveloperAppInsightsApiKeySet?: boolean;
    /**
     * Token used to migrate non Azure bot to azure subscription
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly migrationToken?: string;
    /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
    disableLocalAuth?: boolean;
    /** The channel schema transformation version for the bot */
    schemaTransformationVersion?: string;
    /** The storage resourceId for the bot */
    storageResourceId?: string;
    /**
     * List of Private Endpoint Connections configured for the bot
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** The hint to browser (e.g. protocol handler) on how to open the bot for authoring */
    openWithHint?: string;
    /** The hint (e.g. keyVault secret resourceId) on how to fetch the app secret */
    appPasswordHint?: string;
    /**
     * Provisioning state of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Publishing credentials of the resource */
    publishingCredentials?: string;
}

/** The list of bot service operation response. */
export declare interface BotResponseList {
    /** The link used to get the next page of bot service resources. */
    nextLink?: string;
    /**
     * Gets the list of bot service results and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Bot[];
}

/** Interface representing a Bots. */
export declare interface Bots {
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: BotsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Bot>;
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options?: BotsListOptionalParams): PagedAsyncIterableIterator<Bot>;
    /**
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceName: string, parameters: Bot, options?: BotsCreateOptionalParams): Promise<BotsCreateResponse>;
    /**
     * Updates a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, resourceName: string, options?: BotsUpdateOptionalParams): Promise<BotsUpdateResponse>;
    /**
     * Deletes a Bot Service from the resource group.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, options?: BotsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a BotService specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, options?: BotsGetOptionalParams): Promise<BotsGetResponse>;
    /**
     * Check whether a bot name is available.
     * @param parameters The request body parameters to provide for the check name availability request
     * @param options The options parameters.
     */
    getCheckNameAvailability(parameters: CheckNameAvailabilityRequestBody, options?: BotsGetCheckNameAvailabilityOptionalParams): Promise<BotsGetCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface BotsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type BotsCreateResponse = Bot;

/** Optional parameters. */
export declare interface BotsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BotsGetCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCheckNameAvailability operation. */
export declare type BotsGetCheckNameAvailabilityResponse = CheckNameAvailabilityResponseBody;

/** Optional parameters. */
export declare interface BotsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BotsGetResponse = Bot;

/** Optional parameters. */
export declare interface BotsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type BotsListByResourceGroupNextResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type BotsListByResourceGroupResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BotsListNextResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BotsListResponse = BotResponseList;

/** Optional parameters. */
export declare interface BotsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the SKU of the resource. */
    sku?: Sku;
    /** Required. Gets or sets the Kind of the resource. */
    kind?: Kind;
    /** Entity Tag */
    etag?: string;
    /** The set of properties specific to bot resource */
    properties?: BotProperties;
}

/** Contains response data for the update operation. */
export declare type BotsUpdateResponse = Bot;

/** Channel definition */
export declare interface Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "AlexaChannel" | "FacebookChannel" | "EmailChannel" | "OutlookChannel" | "MsTeamsChannel" | "SkypeChannel" | "KikChannel" | "WebChatChannel" | "DirectLineChannel" | "TelegramChannel" | "SmsChannel" | "SlackChannel" | "LineChannel" | "DirectLineSpeechChannel" | "Omnichannel" | "TelephonyChannel" | "AcsChatChannel" | "SearchAssistant" | "M365Extensions";
    /** Entity Tag of the resource */
    etag?: string;
    /**
     * Provisioning state of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Specifies the location of the resource. */
    location?: string;
}

/** Defines values for ChannelName. */
export declare type ChannelName = "AlexaChannel" | "FacebookChannel" | "EmailChannel" | "KikChannel" | "TelegramChannel" | "SlackChannel" | "MsTeamsChannel" | "SkypeChannel" | "WebChatChannel" | "DirectLineChannel" | "SmsChannel" | "LineChannel" | "DirectLineSpeechChannel" | "OutlookChannel" | "Omnichannel" | "TelephonyChannel" | "AcsChatChannel" | "SearchAssistant" | "M365Extensions";

/** The list of bot service channel operation response. */
export declare interface ChannelResponseList {
    /** The link used to get the next page of bot service channel resources. */
    nextLink?: string;
    /**
     * Gets the list of bot service channel results and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BotChannel[];
}

/** Interface representing a Channels. */
export declare interface Channels {
    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, resourceName: string, options?: ChannelsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<BotChannel>;
    /**
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceName: string, channelName: ChannelName, parameters: BotChannel, options?: ChannelsCreateOptionalParams): Promise<ChannelsCreateResponse>;
    /**
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, resourceName: string, channelName: ChannelName, options?: ChannelsUpdateOptionalParams): Promise<ChannelsUpdateResponse>;
    /**
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, channelName: string, options?: ChannelsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, channelName: string, options?: ChannelsGetOptionalParams): Promise<ChannelsGetResponse>;
    /**
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    listWithKeys(resourceGroupName: string, resourceName: string, channelName: ChannelName, options?: ChannelsListWithKeysOptionalParams): Promise<ChannelsListWithKeysResponse>;
}

/** Optional parameters. */
export declare interface ChannelsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ChannelsCreateResponse = BotChannel;

/** Optional parameters. */
export declare interface ChannelsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Channel settings definition */
export declare interface ChannelSettings {
    /** The extensionKey1 */
    extensionKey1?: string;
    /** The extensionKey2 */
    extensionKey2?: string;
    /** The list of sites */
    sites?: Site[];
    /** The channel id */
    channelId?: string;
    /** The channel display name */
    channelDisplayName?: string;
    /** The bot id */
    botId?: string;
    /** The bot icon url */
    botIconUrl?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled?: boolean;
    /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
    disableLocalAuth?: boolean;
    /** Whether customer needs to agree to new terms. */
    requireTermsAgreement?: boolean;
}

/** Optional parameters. */
export declare interface ChannelsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ChannelsGetResponse = BotChannel;

/** Optional parameters. */
export declare interface ChannelsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ChannelsListByResourceGroupNextResponse = ChannelResponseList;

/** Optional parameters. */
export declare interface ChannelsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ChannelsListByResourceGroupResponse = ChannelResponseList;

/** Optional parameters. */
export declare interface ChannelsListWithKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listWithKeys operation. */
export declare type ChannelsListWithKeysResponse = ListChannelWithKeysResponse;

/** Optional parameters. */
export declare interface ChannelsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Specifies the location of the resource. */
    location?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the SKU of the resource. */
    sku?: Sku;
    /** Required. Gets or sets the Kind of the resource. */
    kind?: Kind;
    /** Entity Tag */
    etag?: string;
    /** The set of properties specific to bot channel resource */
    properties?: ChannelUnion;
}

/** Contains response data for the update operation. */
export declare type ChannelsUpdateResponse = BotChannel;

export declare type ChannelUnion = Channel | AlexaChannel | FacebookChannel | EmailChannel | OutlookChannel | MsTeamsChannel | SkypeChannel | KikChannel | WebChatChannel | DirectLineChannel | TelegramChannel | SmsChannel | SlackChannel | LineChannel | DirectLineSpeechChannel | Omnichannel | TelephonyChannel | AcsChatChannel | SearchAssistant | M365Extensions;

/** The request body for a request to Bot Service Management to check availability of a bot name. */
export declare interface CheckNameAvailabilityRequestBody {
    /** the name of the bot for which availability needs to be checked. */
    name?: string;
    /** the type of the bot for which availability needs to be checked */
    type?: string;
}

/** The response body returned for a request to Bot Service Management to check availability of a bot name. */
export declare interface CheckNameAvailabilityResponseBody {
    /** indicates if the bot name is valid. */
    valid?: boolean;
    /** additional message from the bot management api showing why a bot name is not available */
    message?: string;
    /** response code from ABS */
    absCode?: string;
}

/** The display name of a connection Item Setting registered with the Bot */
export declare interface ConnectionItemName {
    /**
     * Connection Item name that has been added in the API
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** Bot channel resource definition */
export declare interface ConnectionSetting extends Resource {
    /** The set of properties specific to bot channel resource */
    properties?: ConnectionSettingProperties;
}

/** Extra Parameter in a Connection Setting Properties to indicate service provider specific properties */
export declare interface ConnectionSettingParameter {
    /** Key for the Connection Setting Parameter. */
    key?: string;
    /** Value associated with the Connection Setting Parameter. */
    value?: string;
}

/** Properties for a Connection Setting Item */
export declare interface ConnectionSettingProperties {
    /** Client Id associated with the Connection Setting. */
    clientId?: string;
    /**
     * Setting Id set by the service for the Connection Setting.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly settingId?: string;
    /** Client Secret associated with the Connection Setting */
    clientSecret?: string;
    /** Scopes associated with the Connection Setting */
    scopes?: string;
    /** Service Provider Id associated with the Connection Setting */
    serviceProviderId?: string;
    /** Service Provider Display Name associated with the Connection Setting */
    serviceProviderDisplayName?: string;
    /** Service Provider Parameters associated with the Connection Setting */
    parameters?: ConnectionSettingParameter[];
    /** Provisioning state of the resource */
    provisioningState?: string;
}

/** The list of bot service connection settings response. */
export declare interface ConnectionSettingResponseList {
    /** The link used to get the next page of bot service connection setting resources. */
    nextLink?: string;
    /**
     * Gets the list of bot service connection settings and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ConnectionSetting[];
}

/** The ARM create email sign in url operation response. */
export declare interface CreateEmailSignInUrlResponse {
    /**
     * Specifies the resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** Specifies the location of the resource. */
    location?: string;
    /** The set of properties specific to sign in url */
    properties?: CreateEmailSignInUrlResponseProperties;
}

/** The set of properties specific to sign in url */
export declare interface CreateEmailSignInUrlResponseProperties {
    /** Sign in url. */
    url?: string;
}

/** Interface representing a DirectLine. */
export declare interface DirectLine {
    /**
     * Regenerates secret keys and returns them for the DirectLine Channel of a particular BotService
     * resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource for which keys are to be regenerated.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, resourceName: string, channelName: RegenerateKeysChannelName, parameters: SiteInfo, options?: DirectLineRegenerateKeysOptionalParams): Promise<DirectLineRegenerateKeysResponse>;
}

/** Direct Line channel definition */
export declare interface DirectLineChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "DirectLineChannel";
    /** The set of properties specific to Direct Line channel resource */
    properties?: DirectLineChannelProperties;
}

/** The parameters to provide for the Direct Line channel. */
export declare interface DirectLineChannelProperties {
    /** The list of Direct Line sites */
    sites?: DirectLineSite[];
    /** The extensionKey1 */
    extensionKey1?: string;
    /** The extensionKey2 */
    extensionKey2?: string;
    /** Direct Line embed code of the resource */
    directLineEmbedCode?: string;
}

/** Optional parameters. */
export declare interface DirectLineRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type DirectLineRegenerateKeysResponse = BotChannel;

/** A site for the Direct Line channel */
export declare interface DirectLineSite extends Site {
}

/** DirectLine Speech channel definition */
export declare interface DirectLineSpeechChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "DirectLineSpeechChannel";
    /** The set of properties specific to DirectLine Speech channel resource */
    properties?: DirectLineSpeechChannelProperties;
}

/** The parameters to provide for the DirectLine Speech channel. */
export declare interface DirectLineSpeechChannelProperties {
    /** The cognitive service id with this channel registration. */
    cognitiveServiceResourceId?: string;
    /** The cognitive service region with this channel registration. */
    cognitiveServiceRegion?: string;
    /** The cognitive service subscription key to use with this channel registration. */
    cognitiveServiceSubscriptionKey?: string;
    /** Whether this channel is enabled or not. */
    isEnabled?: boolean;
    /** Custom speech model id (optional). */
    customVoiceDeploymentId?: string;
    /** Custom voice deployment id (optional). */
    customSpeechModelId?: string;
    /** Make this a default bot for chosen cognitive service account. */
    isDefaultBotForCogSvcAccount?: boolean;
}

/** Interface representing a Email. */
export declare interface Email {
    /**
     * Creates an email channel sign in url for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    createSignInUrl(resourceGroupName: string, resourceName: string, options?: EmailCreateSignInUrlOptionalParams): Promise<EmailCreateSignInUrlResponse>;
}

/** Email channel definition */
export declare interface EmailChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "EmailChannel";
    /** The set of properties specific to email channel resource */
    properties?: EmailChannelProperties;
}

/** Defines values for EmailChannelAuthMethod. */
export declare type EmailChannelAuthMethod = 0 | 1;

/** The parameters to provide for the Email channel. */
export declare interface EmailChannelProperties {
    /** The email address */
    emailAddress: string;
    /** Email channel auth method. 0 Password (Default); 1 Graph. */
    authMethod?: EmailChannelAuthMethod;
    /** The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty. */
    password?: string;
    /** The magic code for setting up the modern authentication. */
    magicCode?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** Optional parameters. */
export declare interface EmailCreateSignInUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createSignInUrl operation. */
export declare type EmailCreateSignInUrlResponse = CreateEmailSignInUrlResponse;

/** Bot Service error body. */
export declare interface ErrorBody {
    /** error code */
    code: string;
    /** error message */
    message: string;
}

/** Bot Service error object. */
export declare interface ErrorModel {
    /** The error body. */
    error?: ErrorBody;
}

/** Facebook channel definition */
export declare interface FacebookChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "FacebookChannel";
    /** The set of properties specific to bot facebook channel */
    properties?: FacebookChannelProperties;
}

/** The parameters to provide for the Facebook channel. */
export declare interface FacebookChannelProperties {
    /**
     * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly verifyToken?: string;
    /** The list of Facebook pages */
    pages?: FacebookPage[];
    /** Facebook application id */
    appId: string;
    /** Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty. */
    appSecret?: string;
    /**
     * Callback Url
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly callbackUrl?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** A Facebook page for Facebook channel registration */
export declare interface FacebookPage {
    /** Page id */
    id: string;
    /** Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty. */
    accessToken?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Interface representing a HostSettings. */
export declare interface HostSettings {
    /**
     * Get per subscription settings needed to host bot in compute resource such as Azure App Service
     * @param options The options parameters.
     */
    get(options?: HostSettingsGetOptionalParams): Promise<HostSettingsGetResponse>;
}

/** Optional parameters. */
export declare interface HostSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HostSettingsGetResponse = HostSettingsResponse;

/** The response body returned for a request to Bot Service Management to check per subscription hostSettings */
export declare interface HostSettingsResponse {
    /** For in-conversation bot user authentication */
    oAuthUrl?: string;
    /** For verifying incoming tokens from the channels */
    toBotFromChannelOpenIdMetadataUrl?: string;
    /** For verifying incoming tokens from the channels */
    toBotFromChannelTokenIssuer?: string;
    /** For verifying incoming tokens from bot emulator */
    toBotFromEmulatorOpenIdMetadataUrl?: string;
    /** For getting access token to channels from bot host */
    toChannelFromBotLoginUrl?: string;
    /** For getting access token to channels from bot host */
    toChannelFromBotOAuthScope?: string;
    /** Per cloud OAuth setting on whether authority is validated */
    validateAuthority?: boolean;
    /** Same as toBotFromChannelOpenIdMetadataUrl, used by SDK < v4.12 */
    botOpenIdMetadata?: string;
}

/** Defines values for Key. */
export declare type Key = "key1" | "key2";

/** Kik channel definition */
export declare interface KikChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "KikChannel";
    /** The set of properties specific to Kik channel resource */
    properties?: KikChannelProperties;
}

/** The parameters to provide for the Kik channel. */
export declare interface KikChannelProperties {
    /** The Kik user name */
    userName: string;
    /** Kik API key. Value only returned through POST to the action Channel List API, otherwise empty. */
    apiKey?: string;
    /** Whether this channel is validated for the bot */
    isValidated?: boolean;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **sdk** \
 * **designer** \
 * **bot** \
 * **function** \
 * **azurebot**
 */
export declare type Kind = string;

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** Sdk */
    Sdk = "sdk",
    /** Designer */
    Designer = "designer",
    /** Bot */
    Bot = "bot",
    /** Function */
    Function = "function",
    /** Azurebot */
    Azurebot = "azurebot"
}

/** Known values of {@link MsaAppType} that the service accepts. */
export declare enum KnownMsaAppType {
    /** UserAssignedMSI */
    UserAssignedMSI = "UserAssignedMSI",
    /** SingleTenant */
    SingleTenant = "SingleTenant",
    /** MultiTenant */
    MultiTenant = "MultiTenant"
}

/** Known values of {@link OperationResultStatus} that the service accepts. */
export declare enum KnownOperationResultStatus {
    /** Canceled */
    Canceled = "Canceled",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Requested */
    Requested = "Requested",
    /** Running */
    Running = "Running"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** F0 */
    F0 = "F0",
    /** S1 */
    S1 = "S1"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Free */
    Free = "Free",
    /** Standard */
    Standard = "Standard"
}

/** Line channel definition */
export declare interface LineChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "LineChannel";
    /** The set of properties specific to line channel resource */
    properties?: LineChannelProperties;
}

/** The parameters to provide for the Line channel. */
export declare interface LineChannelProperties {
    /** The list of line channel registrations */
    lineRegistrations: LineRegistration[];
    /**
     * Callback Url to enter in line registration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly callbackUrl?: string;
    /**
     * Whether this channel is validated for the bot
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isValidated?: boolean;
}

/** The properties corresponding to a line channel registration */
export declare interface LineRegistration {
    /**
     * Id generated for the line channel registration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generatedId?: string;
    /** Secret for the line channel registration */
    channelSecret?: string;
    /** Access token for the line channel registration */
    channelAccessToken?: string;
}

/** The ARM channel of list channel with keys operation response. */
export declare interface ListChannelWithKeysResponse extends BotChannel {
    /** The set of properties specific to bot channel resource */
    resource?: ChannelUnion;
    /** Channel settings */
    setting?: ChannelSettings;
    /** Provisioning state of the resource */
    provisioningState?: string;
    /** Entity tag of the resource */
    entityTag?: string;
    /** Changed time of the resource */
    changedTime?: string;
}

/** M365 Extensions definition */
export declare interface M365Extensions extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "M365Extensions";
}

/**
 * Defines values for MsaAppType. \
 * {@link KnownMsaAppType} can be used interchangeably with MsaAppType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserAssignedMSI** \
 * **SingleTenant** \
 * **MultiTenant**
 */
export declare type MsaAppType = string;

/** Microsoft Teams channel definition */
export declare interface MsTeamsChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "MsTeamsChannel";
    /** The set of properties specific to Microsoft Teams channel resource */
    properties?: MsTeamsChannelProperties;
}

/** The parameters to provide for the Microsoft Teams channel. */
export declare interface MsTeamsChannelProperties {
    /** Enable calling for Microsoft Teams channel */
    enableCalling?: boolean;
    /** Webhook for Microsoft Teams channel calls */
    callingWebhook?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
    /** Webhook for Microsoft Teams channel calls */
    incomingCallRoute?: string;
    /** Deployment environment for Microsoft Teams channel calls */
    deploymentEnvironment?: string;
    /** Whether this channel accepted terms */
    acceptedTerms?: boolean;
}

/** Omnichannel channel definition */
export declare interface Omnichannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "Omnichannel";
}

/** The operation supported by Bot Service Management. */
export declare interface OperationDisplayInfo {
    /** The description of the operation. */
    description?: string;
    /** The action that users can perform, based on their permission level. */
    operation?: string;
    /** Service provider: Microsoft Bot Service. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
}

/** The operations supported by Bot Service Management. */
export declare interface OperationEntity {
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** The operation supported by Bot Service Management. */
    display?: OperationDisplayInfo;
    /** The origin of the operation. */
    origin?: string;
    /** Additional properties. */
    properties?: Record<string, unknown>;
}

/** The list of bot service operation response. */
export declare interface OperationEntityListResult {
    /** The link used to get the next page of operations. */
    nextLink?: string;
    /** The list of operations. */
    value?: OperationEntity[];
}

/** Interface representing a OperationResults. */
export declare interface OperationResults {
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param options The options parameters.
     */
    beginGet(operationResultId: string, options?: OperationResultsGetOptionalParams): Promise<PollerLike<PollOperationState<OperationResultsGetResponse>, OperationResultsGetResponse>>;
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param options The options parameters.
     */
    beginGetAndWait(operationResultId: string, options?: OperationResultsGetOptionalParams): Promise<OperationResultsGetResponse>;
}

/** The properties indicating the operation result of an operation on a service. */
export declare interface OperationResultsDescription {
    /**
     * The ID of the operation returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the operation result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the operation being performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: OperationResultStatus;
    /**
     * The time that the operation was started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
}

/** Optional parameters. */
export declare interface OperationResultsGetOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the get operation. */
export declare type OperationResultsGetResponse = OperationResultsDescription;

/**
 * Defines values for OperationResultStatus. \
 * {@link KnownOperationResultStatus} can be used interchangeably with OperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Canceled** \
 * **Succeeded** \
 * **Failed** \
 * **Requested** \
 * **Running**
 */
export declare type OperationResultStatus = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all the available BotService operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationEntity>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationEntityListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationEntityListResult;

/** Outlook channel definition */
export declare interface OutlookChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "OutlookChannel";
}

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends PrivateLinkResourceBase {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
    /** Group ids */
    groupIds?: string[];
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all the private endpoint connections associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PrivateEndpointConnectionsCreateResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends PrivateLinkResourceBase {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** Common fields that are returned in the response for all BotService Private Link Resources */
export declare interface PrivateLinkResourceBase {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByBotResource(resourceGroupName: string, resourceName: string, options?: PrivateLinkResourcesListByBotResourceOptionalParams): Promise<PrivateLinkResourcesListByBotResourceResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByBotResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBotResource operation. */
export declare type PrivateLinkResourcesListByBotResourceResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Interface representing a QnAMakerEndpointKeys. */
export declare interface QnAMakerEndpointKeys {
    /**
     * Lists the QnA Maker endpoint keys
     * @param parameters The request body parameters to provide for the check name availability request
     * @param options The options parameters.
     */
    get(parameters: QnAMakerEndpointKeysRequestBody, options?: QnAMakerEndpointKeysGetOptionalParams): Promise<QnAMakerEndpointKeysGetResponse>;
}

/** Optional parameters. */
export declare interface QnAMakerEndpointKeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QnAMakerEndpointKeysGetResponse = QnAMakerEndpointKeysResponse;

/** The request body for a request to Bot Service Management to list QnA Maker endpoint keys. */
export declare interface QnAMakerEndpointKeysRequestBody {
    /** the host name of the QnA Maker endpoint */
    hostname?: string;
    /** Subscription key which provides access to this API. */
    authkey?: string;
}

/** Schema for EndpointKeys generate/refresh operations. */
export declare interface QnAMakerEndpointKeysResponse {
    /** Primary Access Key. */
    primaryEndpointKey?: string;
    /** Secondary Access Key. */
    secondaryEndpointKey?: string;
    /** Current version of runtime. */
    installedVersion?: string;
    /** Latest version of runtime. */
    lastStableVersion?: string;
}

/** Defines values for RegenerateKeysChannelName. */
export declare type RegenerateKeysChannelName = "WebChatChannel" | "DirectLineChannel";

/** Azure resource */
export declare interface Resource {
    /**
     * Specifies the resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Specifies the name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Specifies the location of the resource. */
    location?: string;
    /**
     * Specifies the type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Contains resource tags defined as key/value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Gets or sets the SKU of the resource. */
    sku?: Sku;
    /** Required. Gets or sets the Kind of the resource. */
    kind?: Kind;
    /** Entity Tag */
    etag?: string;
    /**
     * Entity zones
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zones?: string[];
}

/** SearchAssistant definition */
export declare interface SearchAssistant extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "SearchAssistant";
}

/** Service Provider Definition */
export declare interface ServiceProvider {
    /** The Properties of a Service Provider Object */
    properties?: ServiceProviderProperties;
}

/** Extra Parameters specific to each Service Provider */
export declare interface ServiceProviderParameter {
    /**
     * Name of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Type of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Display Name of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Description of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Help Url for the  Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly helpUrl?: string;
    /**
     * Default Name for the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly default?: string;
    /**
     * Meta data for the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: ServiceProviderParameterMetadata;
}

/** Meta data for the Service Provider */
export declare interface ServiceProviderParameterMetadata {
    /** the constraints of the bot meta data. */
    constraints?: ServiceProviderParameterMetadataConstraints;
}

/** the constraints of the bot meta data. */
export declare interface ServiceProviderParameterMetadataConstraints {
    /** Whether required the constraints of the bot meta data. */
    required?: boolean;
}

/** The Object used to describe a Service Provider supported by Bot Service */
export declare interface ServiceProviderProperties {
    /**
     * Id for Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Display Name of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Name of the Service Provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceProviderName?: string;
    /**
     * URL of Dev Portal
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly devPortalUrl?: string;
    /** The URL of icon */
    iconUrl?: string;
    /** The list of parameters for the Service Provider */
    parameters?: ServiceProviderParameter[];
}

/** The list of bot service providers response. */
export declare interface ServiceProviderResponseList {
    /** The link used to get the next page of bot service providers. */
    nextLink?: string;
    /**
     * Gets the list of bot service providers and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServiceProvider[];
}

/** A site for the channel */
export declare interface Site {
    /** Tenant Id */
    tenantId?: string;
    /**
     * Site Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly siteId?: string;
    /** Site name */
    siteName: string;
    /**
     * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
    /**
     * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key2?: string;
    /** Whether this site is enabled for DirectLine channel */
    isEnabled: boolean;
    /**
     * Whether this site is token enabled for channel
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isTokenEnabled?: boolean;
    /** Whether this site is EndpointParameters enabled for channel */
    isEndpointParametersEnabled?: boolean;
    /** Whether this site is disabled detailed logging for */
    isDetailedLoggingEnabled?: boolean;
    /** Whether this site is enabled for block user upload. */
    isBlockUserUploadEnabled?: boolean;
    /** Whether this no-storage site is disabled detailed logging for */
    isNoStorageEnabled?: boolean;
    /** Entity Tag */
    eTag?: string;
    /** DirectLine application id */
    appId?: string;
    /** Whether this site is enabled for Bot Framework V1 protocol. */
    isV1Enabled?: boolean;
    /** Whether this site is enabled for Bot Framework V3 protocol. */
    isV3Enabled?: boolean;
    /** Whether this site is enabled for authentication with Bot Framework. */
    isSecureSiteEnabled?: boolean;
    /** List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True. */
    trustedOrigins?: string[];
    /** Whether this site is enabled for Webchat Speech */
    isWebChatSpeechEnabled?: boolean;
    /** Whether this site is enabled for preview versions of Webchat */
    isWebchatPreviewEnabled?: boolean;
}

/** Site information for WebChat or DirectLine Channels to identify which site to regenerate keys for. */
export declare interface SiteInfo {
    /** The site name */
    siteName: string;
    /** Determines which key is to be regenerated */
    key: Key;
}

/** The SKU of the cognitive services account. */
export declare interface Sku {
    /** The sku name */
    name: SkuName;
    /**
     * Gets the sku tier. This is based on the SKU name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: SkuTier;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **F0** \
 * **S1**
 */
export declare type SkuName = string;

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Standard**
 */
export declare type SkuTier = string;

/** Skype channel definition */
export declare interface SkypeChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "SkypeChannel";
    /** The set of properties specific to Skype channel resource */
    properties?: SkypeChannelProperties;
}

/** The parameters to provide for the Microsoft Teams channel. */
export declare interface SkypeChannelProperties {
    /** Enable messaging for Skype channel */
    enableMessaging?: boolean;
    /** Enable media cards for Skype channel */
    enableMediaCards?: boolean;
    /** Enable video for Skype channel */
    enableVideo?: boolean;
    /** Enable calling for Skype channel */
    enableCalling?: boolean;
    /** Enable screen sharing for Skype channel */
    enableScreenSharing?: boolean;
    /** Enable groups for Skype channel */
    enableGroups?: boolean;
    /** Group mode for Skype channel */
    groupsMode?: string;
    /** Calling web hook for Skype channel */
    callingWebHook?: string;
    /** Incoming call route for Skype channel */
    incomingCallRoute?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** Slack channel definition */
export declare interface SlackChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "SlackChannel";
    /** The set of properties specific to Slack channel resource */
    properties?: SlackChannelProperties;
}

/** The parameters to provide for the Slack channel. */
export declare interface SlackChannelProperties {
    /** The Slack client id */
    clientId?: string;
    /** The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty. */
    clientSecret?: string;
    /** The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty. */
    verificationToken?: string;
    /** The Slack permission scopes. */
    scopes?: string;
    /** The Slack landing page Url */
    landingPageUrl?: string;
    /**
     * The Slack redirect action
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly redirectAction?: string;
    /**
     * The Sms auth token
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSubmissionId?: string;
    /** Whether to register the settings before OAuth validation is performed. Recommended to True. */
    registerBeforeOAuthFlow?: boolean;
    /**
     * Whether this channel is validated for the bot
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isValidated?: boolean;
    /** The Slack signing secret. */
    signingSecret?: string;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** Sms channel definition */
export declare interface SmsChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "SmsChannel";
    /** The set of properties specific to Sms channel resource */
    properties?: SmsChannelProperties;
}

/** The parameters to provide for the Sms channel. */
export declare interface SmsChannelProperties {
    /** The Sms phone */
    phone: string;
    /** The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty. */
    accountSID: string;
    /** The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty. */
    authToken?: string;
    /** Whether this channel is validated for the bot */
    isValidated?: boolean;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** Telegram channel definition */
export declare interface TelegramChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "TelegramChannel";
    /** The set of properties specific to Telegram channel resource */
    properties?: TelegramChannelProperties;
}

/** The parameters to provide for the Telegram channel. */
export declare interface TelegramChannelProperties {
    /** The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty. */
    accessToken?: string;
    /** Whether this channel is validated for the bot */
    isValidated?: boolean;
    /** Whether this channel is enabled for the bot */
    isEnabled: boolean;
}

/** Telephony channel definition */
export declare interface TelephonyChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "TelephonyChannel";
    /** The set of properties specific to Telephony channel resource */
    properties?: TelephonyChannelProperties;
}

/** The parameters to provide for the Direct Line channel. */
export declare interface TelephonyChannelProperties {
    /** The list of Telephony phone numbers */
    phoneNumbers?: TelephonyPhoneNumbers[];
    /** The list of Telephony api configuration */
    apiConfigurations?: TelephonyChannelResourceApiConfiguration[];
    /** The extensionKey1 */
    cognitiveServiceSubscriptionKey?: string;
    /** The extensionKey2 */
    cognitiveServiceRegion?: string;
    /** The default locale of the channel */
    defaultLocale?: string;
    /** The premium SKU applied to the channel */
    premiumSKU?: string;
    /** Whether the channel is enabled */
    isEnabled?: boolean;
}

/** A resource Api configuration for the Telephony channel */
export declare interface TelephonyChannelResourceApiConfiguration {
    /** The id of config. */
    id?: string;
    /** The provider name. */
    providerName?: string;
    /** The cognitive service subscription key. */
    cognitiveServiceSubscriptionKey?: string;
    /** The cognitive service region. */
    cognitiveServiceRegion?: string;
    /** The cognitive service resourceId. */
    cognitiveServiceResourceId?: string;
    /** The default locale. */
    defaultLocale?: string;
}

/** A telephone number for the Telephony channel */
export declare interface TelephonyPhoneNumbers {
    /** The element id. */
    id?: string;
    /** The phone number. */
    phoneNumber?: string;
    /** The endpoint of ACS. */
    acsEndpoint?: string;
    /** The secret of ACS. */
    acsSecret?: string;
    /** The resource id of ACS. */
    acsResourceId?: string;
    /** The subscription key of cognitive service. */
    cognitiveServiceSubscriptionKey?: string;
    /** The service region of cognitive service. */
    cognitiveServiceRegion?: string;
    /** The resource id of cognitive service. */
    cognitiveServiceResourceId?: string;
    /** The default locale of the phone number. */
    defaultLocale?: string;
    /** Optional Property that will determine the offering type of the phone. */
    offerType?: string;
}

/** Web Chat channel definition */
export declare interface WebChatChannel extends Channel {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    channelName: "WebChatChannel";
    /** The set of properties specific to Web Chat channel resource */
    properties?: WebChatChannelProperties;
}

/** The parameters to provide for the Web Chat channel. */
export declare interface WebChatChannelProperties {
    /**
     * Web chat control embed code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly webChatEmbedCode?: string;
    /** The list of Web Chat sites */
    sites?: WebChatSite[];
}

/** A site for the Webchat channel */
export declare interface WebChatSite extends Site {
}

export { }

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link MsaAppType} that the service accepts. */
exports.KnownMsaAppType = void 0;
(function (KnownMsaAppType) {
    /** UserAssignedMSI */
    KnownMsaAppType["UserAssignedMSI"] = "UserAssignedMSI";
    /** SingleTenant */
    KnownMsaAppType["SingleTenant"] = "SingleTenant";
    /** MultiTenant */
    KnownMsaAppType["MultiTenant"] = "MultiTenant";
})(exports.KnownMsaAppType || (exports.KnownMsaAppType = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointServiceConnectionStatus = void 0;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(exports.KnownPrivateEndpointServiceConnectionStatus || (exports.KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionProvisioningState || (exports.KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link SkuName} that the service accepts. */
exports.KnownSkuName = void 0;
(function (KnownSkuName) {
    /** F0 */
    KnownSkuName["F0"] = "F0";
    /** S1 */
    KnownSkuName["S1"] = "S1";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Free */
    KnownSkuTier["Free"] = "Free";
    /** Standard */
    KnownSkuTier["Standard"] = "Standard";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));
/** Known values of {@link Kind} that the service accepts. */
exports.KnownKind = void 0;
(function (KnownKind) {
    /** Sdk */
    KnownKind["Sdk"] = "sdk";
    /** Designer */
    KnownKind["Designer"] = "designer";
    /** Bot */
    KnownKind["Bot"] = "bot";
    /** Function */
    KnownKind["Function"] = "function";
    /** Azurebot */
    KnownKind["Azurebot"] = "azurebot";
})(exports.KnownKind || (exports.KnownKind = {}));
/** Known values of {@link OperationResultStatus} that the service accepts. */
exports.KnownOperationResultStatus = void 0;
(function (KnownOperationResultStatus) {
    /** Canceled */
    KnownOperationResultStatus["Canceled"] = "Canceled";
    /** Succeeded */
    KnownOperationResultStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownOperationResultStatus["Failed"] = "Failed";
    /** Requested */
    KnownOperationResultStatus["Requested"] = "Requested";
    /** Running */
    KnownOperationResultStatus["Running"] = "Running";
})(exports.KnownOperationResultStatus || (exports.KnownOperationResultStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const BotProperties = {
    type: {
        name: "Composite",
        className: "BotProperties",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            iconUrl: {
                defaultValue: "",
                serializedName: "iconUrl",
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "endpoint",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            endpointVersion: {
                serializedName: "endpointVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            allSettings: {
                serializedName: "allSettings",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            manifestUrl: {
                serializedName: "manifestUrl",
                type: {
                    name: "String"
                }
            },
            msaAppType: {
                serializedName: "msaAppType",
                type: {
                    name: "String"
                }
            },
            msaAppId: {
                serializedName: "msaAppId",
                required: true,
                type: {
                    name: "String"
                }
            },
            msaAppTenantId: {
                serializedName: "msaAppTenantId",
                type: {
                    name: "String"
                }
            },
            msaAppMSIResourceId: {
                serializedName: "msaAppMSIResourceId",
                type: {
                    name: "String"
                }
            },
            configuredChannels: {
                serializedName: "configuredChannels",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            enabledChannels: {
                serializedName: "enabledChannels",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            developerAppInsightKey: {
                serializedName: "developerAppInsightKey",
                type: {
                    name: "String"
                }
            },
            developerAppInsightsApiKey: {
                serializedName: "developerAppInsightsApiKey",
                type: {
                    name: "String"
                }
            },
            developerAppInsightsApplicationId: {
                serializedName: "developerAppInsightsApplicationId",
                type: {
                    name: "String"
                }
            },
            luisAppIds: {
                serializedName: "luisAppIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            luisKey: {
                serializedName: "luisKey",
                type: {
                    name: "String"
                }
            },
            isCmekEnabled: {
                defaultValue: false,
                serializedName: "isCmekEnabled",
                type: {
                    name: "Boolean"
                }
            },
            cmekKeyVaultUrl: {
                serializedName: "cmekKeyVaultUrl",
                type: {
                    name: "String"
                }
            },
            cmekEncryptionStatus: {
                serializedName: "cmekEncryptionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            isStreamingSupported: {
                defaultValue: false,
                serializedName: "isStreamingSupported",
                type: {
                    name: "Boolean"
                }
            },
            isDeveloperAppInsightsApiKeySet: {
                serializedName: "isDeveloperAppInsightsApiKeySet",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            migrationToken: {
                serializedName: "migrationToken",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            disableLocalAuth: {
                serializedName: "disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            },
            schemaTransformationVersion: {
                serializedName: "schemaTransformationVersion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            storageResourceId: {
                serializedName: "storageResourceId",
                type: {
                    name: "String"
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            openWithHint: {
                serializedName: "openWithHint",
                type: {
                    name: "String"
                }
            },
            appPasswordHint: {
                serializedName: "appPasswordHint",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            publishingCredentials: {
                serializedName: "publishingCredentials",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceBase = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceBase",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            kind: {
                serializedName: "kind",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            zones: {
                serializedName: "zones",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorBody"
                }
            }
        }
    }
};
const ErrorBody = {
    type: {
        name: "Composite",
        className: "ErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BotResponseList = {
    type: {
        name: "Composite",
        className: "BotResponseList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Bot"
                        }
                    }
                }
            }
        }
    }
};
const Channel = {
    type: {
        name: "Composite",
        className: "Channel",
        uberParent: "Channel",
        polymorphicDiscriminator: {
            serializedName: "channelName",
            clientName: "channelName"
        },
        modelProperties: {
            channelName: {
                serializedName: "channelName",
                required: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                defaultValue: "global",
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChannelSettings = {
    type: {
        name: "Composite",
        className: "ChannelSettings",
        modelProperties: {
            extensionKey1: {
                defaultValue: "",
                serializedName: "extensionKey1",
                type: {
                    name: "String"
                }
            },
            extensionKey2: {
                defaultValue: "",
                serializedName: "extensionKey2",
                type: {
                    name: "String"
                }
            },
            sites: {
                serializedName: "sites",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Site"
                        }
                    }
                }
            },
            channelId: {
                serializedName: "channelId",
                type: {
                    name: "String"
                }
            },
            channelDisplayName: {
                serializedName: "channelDisplayName",
                type: {
                    name: "String"
                }
            },
            botId: {
                serializedName: "botId",
                type: {
                    name: "String"
                }
            },
            botIconUrl: {
                serializedName: "botIconUrl",
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            },
            disableLocalAuth: {
                serializedName: "disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            },
            requireTermsAgreement: {
                serializedName: "requireTermsAgreement",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Site = {
    type: {
        name: "Composite",
        className: "Site",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            siteId: {
                serializedName: "siteId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            siteName: {
                serializedName: "siteName",
                required: true,
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            key2: {
                serializedName: "key2",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            isTokenEnabled: {
                serializedName: "isTokenEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            isEndpointParametersEnabled: {
                serializedName: "isEndpointParametersEnabled",
                type: {
                    name: "Boolean"
                }
            },
            isDetailedLoggingEnabled: {
                serializedName: "isDetailedLoggingEnabled",
                type: {
                    name: "Boolean"
                }
            },
            isBlockUserUploadEnabled: {
                serializedName: "isBlockUserUploadEnabled",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            isNoStorageEnabled: {
                serializedName: "isNoStorageEnabled",
                type: {
                    name: "Boolean"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            appId: {
                serializedName: "appId",
                type: {
                    name: "String"
                }
            },
            isV1Enabled: {
                serializedName: "isV1Enabled",
                type: {
                    name: "Boolean"
                }
            },
            isV3Enabled: {
                serializedName: "isV3Enabled",
                type: {
                    name: "Boolean"
                }
            },
            isSecureSiteEnabled: {
                serializedName: "isSecureSiteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            trustedOrigins: {
                serializedName: "trustedOrigins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isWebChatSpeechEnabled: {
                defaultValue: false,
                serializedName: "isWebChatSpeechEnabled",
                type: {
                    name: "Boolean"
                }
            },
            isWebchatPreviewEnabled: {
                defaultValue: false,
                serializedName: "isWebchatPreviewEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ChannelResponseList = {
    type: {
        name: "Composite",
        className: "ChannelResponseList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BotChannel"
                        }
                    }
                }
            }
        }
    }
};
const SiteInfo = {
    type: {
        name: "Composite",
        className: "SiteInfo",
        modelProperties: {
            siteName: {
                serializedName: "siteName",
                required: true,
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["key1", "key2"]
                }
            }
        }
    }
};
const CreateEmailSignInUrlResponse = {
    type: {
        name: "Composite",
        className: "CreateEmailSignInUrlResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateEmailSignInUrlResponseProperties"
                }
            }
        }
    }
};
const CreateEmailSignInUrlResponseProperties = {
    type: {
        name: "Composite",
        className: "CreateEmailSignInUrlResponseProperties",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityRequestBody = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityRequestBody",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResponseBody = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResponseBody",
        modelProperties: {
            valid: {
                serializedName: "valid",
                type: {
                    name: "Boolean"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            absCode: {
                serializedName: "absCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationEntityListResult = {
    type: {
        name: "Composite",
        className: "OperationEntityListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationEntity"
                        }
                    }
                }
            }
        }
    }
};
const OperationEntity = {
    type: {
        name: "Composite",
        className: "OperationEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayInfo"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationDisplayInfo = {
    type: {
        name: "Composite",
        className: "OperationDisplayInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceProviderResponseList = {
    type: {
        name: "Composite",
        className: "ServiceProviderResponseList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceProvider"
                        }
                    }
                }
            }
        }
    }
};
const ServiceProvider = {
    type: {
        name: "Composite",
        className: "ServiceProvider",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ServiceProviderProperties"
                }
            }
        }
    }
};
const ServiceProviderProperties = {
    type: {
        name: "Composite",
        className: "ServiceProviderProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceProviderName: {
                serializedName: "serviceProviderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            devPortalUrl: {
                serializedName: "devPortalUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            iconUrl: {
                defaultValue: "",
                serializedName: "iconUrl",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceProviderParameter"
                        }
                    }
                }
            }
        }
    }
};
const ServiceProviderParameter = {
    type: {
        name: "Composite",
        className: "ServiceProviderParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            helpUrl: {
                serializedName: "helpUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            default: {
                serializedName: "default",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "ServiceProviderParameterMetadata"
                }
            }
        }
    }
};
const ServiceProviderParameterMetadata = {
    type: {
        name: "Composite",
        className: "ServiceProviderParameterMetadata",
        modelProperties: {
            constraints: {
                serializedName: "constraints",
                type: {
                    name: "Composite",
                    className: "ServiceProviderParameterMetadataConstraints"
                }
            }
        }
    }
};
const ServiceProviderParameterMetadataConstraints = {
    type: {
        name: "Composite",
        className: "ServiceProviderParameterMetadataConstraints",
        modelProperties: {
            required: {
                serializedName: "required",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const QnAMakerEndpointKeysRequestBody = {
    type: {
        name: "Composite",
        className: "QnAMakerEndpointKeysRequestBody",
        modelProperties: {
            hostname: {
                serializedName: "hostname",
                type: {
                    name: "String"
                }
            },
            authkey: {
                serializedName: "authkey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QnAMakerEndpointKeysResponse = {
    type: {
        name: "Composite",
        className: "QnAMakerEndpointKeysResponse",
        modelProperties: {
            primaryEndpointKey: {
                serializedName: "primaryEndpointKey",
                type: {
                    name: "String"
                }
            },
            secondaryEndpointKey: {
                serializedName: "secondaryEndpointKey",
                type: {
                    name: "String"
                }
            },
            installedVersion: {
                serializedName: "installedVersion",
                type: {
                    name: "String"
                }
            },
            lastStableVersion: {
                serializedName: "lastStableVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionSettingProperties = {
    type: {
        name: "Composite",
        className: "ConnectionSettingProperties",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            settingId: {
                serializedName: "settingId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "String"
                }
            },
            scopes: {
                defaultValue: "",
                serializedName: "scopes",
                type: {
                    name: "String"
                }
            },
            serviceProviderId: {
                serializedName: "serviceProviderId",
                type: {
                    name: "String"
                }
            },
            serviceProviderDisplayName: {
                serializedName: "serviceProviderDisplayName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionSettingParameter"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionSettingParameter = {
    type: {
        name: "Composite",
        className: "ConnectionSettingParameter",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionSettingResponseList = {
    type: {
        name: "Composite",
        className: "ConnectionSettingResponseList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionSetting"
                        }
                    }
                }
            }
        }
    }
};
const HostSettingsResponse = {
    type: {
        name: "Composite",
        className: "HostSettingsResponse",
        modelProperties: {
            oAuthUrl: {
                serializedName: "OAuthUrl",
                type: {
                    name: "String"
                }
            },
            toBotFromChannelOpenIdMetadataUrl: {
                serializedName: "ToBotFromChannelOpenIdMetadataUrl",
                type: {
                    name: "String"
                }
            },
            toBotFromChannelTokenIssuer: {
                serializedName: "ToBotFromChannelTokenIssuer",
                type: {
                    name: "String"
                }
            },
            toBotFromEmulatorOpenIdMetadataUrl: {
                serializedName: "ToBotFromEmulatorOpenIdMetadataUrl",
                type: {
                    name: "String"
                }
            },
            toChannelFromBotLoginUrl: {
                serializedName: "ToChannelFromBotLoginUrl",
                type: {
                    name: "String"
                }
            },
            toChannelFromBotOAuthScope: {
                serializedName: "ToChannelFromBotOAuthScope",
                type: {
                    name: "String"
                }
            },
            validateAuthority: {
                serializedName: "ValidateAuthority",
                type: {
                    name: "Boolean"
                }
            },
            botOpenIdMetadata: {
                serializedName: "BotOpenIdMetadata",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultsDescription = {
    type: {
        name: "Composite",
        className: "OperationResultsDescription",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const AlexaChannelProperties = {
    type: {
        name: "Composite",
        className: "AlexaChannelProperties",
        modelProperties: {
            alexaSkillId: {
                serializedName: "alexaSkillId",
                required: true,
                type: {
                    name: "String"
                }
            },
            urlFragment: {
                serializedName: "urlFragment",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceEndpointUri: {
                serializedName: "serviceEndpointUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const FacebookChannelProperties = {
    type: {
        name: "Composite",
        className: "FacebookChannelProperties",
        modelProperties: {
            verifyToken: {
                serializedName: "verifyToken",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            pages: {
                serializedName: "pages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FacebookPage"
                        }
                    }
                }
            },
            appId: {
                serializedName: "appId",
                required: true,
                type: {
                    name: "String"
                }
            },
            appSecret: {
                serializedName: "appSecret",
                type: {
                    name: "String"
                }
            },
            callbackUrl: {
                serializedName: "callbackUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const FacebookPage = {
    type: {
        name: "Composite",
        className: "FacebookPage",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmailChannelProperties = {
    type: {
        name: "Composite",
        className: "EmailChannelProperties",
        modelProperties: {
            emailAddress: {
                serializedName: "emailAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            authMethod: {
                serializedName: "authMethod",
                type: {
                    name: "Enum",
                    allowedValues: [0, 1]
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            magicCode: {
                serializedName: "magicCode",
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MsTeamsChannelProperties = {
    type: {
        name: "Composite",
        className: "MsTeamsChannelProperties",
        modelProperties: {
            enableCalling: {
                defaultValue: false,
                serializedName: "enableCalling",
                type: {
                    name: "Boolean"
                }
            },
            callingWebhook: {
                serializedName: "callingWebhook",
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            incomingCallRoute: {
                serializedName: "incomingCallRoute",
                type: {
                    name: "String"
                }
            },
            deploymentEnvironment: {
                defaultValue: "FallbackDeploymentEnvironment",
                serializedName: "deploymentEnvironment",
                type: {
                    name: "String"
                }
            },
            acceptedTerms: {
                serializedName: "acceptedTerms",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SkypeChannelProperties = {
    type: {
        name: "Composite",
        className: "SkypeChannelProperties",
        modelProperties: {
            enableMessaging: {
                serializedName: "enableMessaging",
                type: {
                    name: "Boolean"
                }
            },
            enableMediaCards: {
                serializedName: "enableMediaCards",
                type: {
                    name: "Boolean"
                }
            },
            enableVideo: {
                serializedName: "enableVideo",
                type: {
                    name: "Boolean"
                }
            },
            enableCalling: {
                defaultValue: false,
                serializedName: "enableCalling",
                type: {
                    name: "Boolean"
                }
            },
            enableScreenSharing: {
                serializedName: "enableScreenSharing",
                type: {
                    name: "Boolean"
                }
            },
            enableGroups: {
                serializedName: "enableGroups",
                type: {
                    name: "Boolean"
                }
            },
            groupsMode: {
                serializedName: "groupsMode",
                type: {
                    name: "String"
                }
            },
            callingWebHook: {
                serializedName: "callingWebHook",
                type: {
                    name: "String"
                }
            },
            incomingCallRoute: {
                serializedName: "incomingCallRoute",
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const KikChannelProperties = {
    type: {
        name: "Composite",
        className: "KikChannelProperties",
        modelProperties: {
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "String"
                }
            },
            apiKey: {
                serializedName: "apiKey",
                type: {
                    name: "String"
                }
            },
            isValidated: {
                serializedName: "isValidated",
                type: {
                    name: "Boolean"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const WebChatChannelProperties = {
    type: {
        name: "Composite",
        className: "WebChatChannelProperties",
        modelProperties: {
            webChatEmbedCode: {
                serializedName: "webChatEmbedCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sites: {
                serializedName: "sites",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WebChatSite"
                        }
                    }
                }
            }
        }
    }
};
const DirectLineChannelProperties = {
    type: {
        name: "Composite",
        className: "DirectLineChannelProperties",
        modelProperties: {
            sites: {
                serializedName: "sites",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DirectLineSite"
                        }
                    }
                }
            },
            extensionKey1: {
                defaultValue: "",
                serializedName: "extensionKey1",
                type: {
                    name: "String"
                }
            },
            extensionKey2: {
                defaultValue: "",
                serializedName: "extensionKey2",
                type: {
                    name: "String"
                }
            },
            directLineEmbedCode: {
                serializedName: "DirectLineEmbedCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TelegramChannelProperties = {
    type: {
        name: "Composite",
        className: "TelegramChannelProperties",
        modelProperties: {
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            isValidated: {
                serializedName: "isValidated",
                type: {
                    name: "Boolean"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SmsChannelProperties = {
    type: {
        name: "Composite",
        className: "SmsChannelProperties",
        modelProperties: {
            phone: {
                serializedName: "phone",
                required: true,
                type: {
                    name: "String"
                }
            },
            accountSID: {
                serializedName: "accountSID",
                required: true,
                type: {
                    name: "String"
                }
            },
            authToken: {
                serializedName: "authToken",
                type: {
                    name: "String"
                }
            },
            isValidated: {
                serializedName: "isValidated",
                type: {
                    name: "Boolean"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SlackChannelProperties = {
    type: {
        name: "Composite",
        className: "SlackChannelProperties",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "String"
                }
            },
            verificationToken: {
                serializedName: "verificationToken",
                type: {
                    name: "String"
                }
            },
            scopes: {
                serializedName: "scopes",
                type: {
                    name: "String"
                }
            },
            landingPageUrl: {
                serializedName: "landingPageUrl",
                type: {
                    name: "String"
                }
            },
            redirectAction: {
                serializedName: "redirectAction",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastSubmissionId: {
                serializedName: "lastSubmissionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            registerBeforeOAuthFlow: {
                serializedName: "registerBeforeOAuthFlow",
                type: {
                    name: "Boolean"
                }
            },
            isValidated: {
                serializedName: "IsValidated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            signingSecret: {
                serializedName: "signingSecret",
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const LineChannelProperties = {
    type: {
        name: "Composite",
        className: "LineChannelProperties",
        modelProperties: {
            lineRegistrations: {
                serializedName: "lineRegistrations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LineRegistration"
                        }
                    }
                }
            },
            callbackUrl: {
                serializedName: "callbackUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isValidated: {
                serializedName: "isValidated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const LineRegistration = {
    type: {
        name: "Composite",
        className: "LineRegistration",
        modelProperties: {
            generatedId: {
                serializedName: "generatedId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            channelSecret: {
                serializedName: "channelSecret",
                type: {
                    name: "String"
                }
            },
            channelAccessToken: {
                serializedName: "channelAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DirectLineSpeechChannelProperties = {
    type: {
        name: "Composite",
        className: "DirectLineSpeechChannelProperties",
        modelProperties: {
            cognitiveServiceResourceId: {
                serializedName: "cognitiveServiceResourceId",
                type: {
                    name: "String"
                }
            },
            cognitiveServiceRegion: {
                serializedName: "cognitiveServiceRegion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceSubscriptionKey: {
                serializedName: "cognitiveServiceSubscriptionKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            },
            customVoiceDeploymentId: {
                serializedName: "customVoiceDeploymentId",
                type: {
                    name: "String"
                }
            },
            customSpeechModelId: {
                serializedName: "customSpeechModelId",
                type: {
                    name: "String"
                }
            },
            isDefaultBotForCogSvcAccount: {
                serializedName: "isDefaultBotForCogSvcAccount",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const TelephonyChannelProperties = {
    type: {
        name: "Composite",
        className: "TelephonyChannelProperties",
        modelProperties: {
            phoneNumbers: {
                serializedName: "phoneNumbers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TelephonyPhoneNumbers"
                        }
                    }
                }
            },
            apiConfigurations: {
                serializedName: "apiConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TelephonyChannelResourceApiConfiguration"
                        }
                    }
                }
            },
            cognitiveServiceSubscriptionKey: {
                serializedName: "cognitiveServiceSubscriptionKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceRegion: {
                serializedName: "cognitiveServiceRegion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            defaultLocale: {
                serializedName: "defaultLocale",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            premiumSKU: {
                serializedName: "premiumSKU",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const TelephonyPhoneNumbers = {
    type: {
        name: "Composite",
        className: "TelephonyPhoneNumbers",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            },
            acsEndpoint: {
                serializedName: "acsEndpoint",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            acsSecret: {
                serializedName: "acsSecret",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            acsResourceId: {
                serializedName: "acsResourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceSubscriptionKey: {
                serializedName: "cognitiveServiceSubscriptionKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceRegion: {
                serializedName: "cognitiveServiceRegion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceResourceId: {
                serializedName: "cognitiveServiceResourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            defaultLocale: {
                serializedName: "defaultLocale",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            offerType: {
                serializedName: "offerType",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TelephonyChannelResourceApiConfiguration = {
    type: {
        name: "Composite",
        className: "TelephonyChannelResourceApiConfiguration",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            providerName: {
                serializedName: "providerName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceSubscriptionKey: {
                serializedName: "cognitiveServiceSubscriptionKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceRegion: {
                serializedName: "cognitiveServiceRegion",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            cognitiveServiceResourceId: {
                serializedName: "cognitiveServiceResourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            defaultLocale: {
                serializedName: "defaultLocale",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionItemName = {
    type: {
        name: "Composite",
        className: "ConnectionItemName",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, PrivateLinkResourceBase.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, groupIds: {
                serializedName: "properties.groupIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, PrivateLinkResourceBase.type.modelProperties), { groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Bot = {
    type: {
        name: "Composite",
        className: "Bot",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BotProperties"
                }
            } })
    }
};
const BotChannel = {
    type: {
        name: "Composite",
        className: "BotChannel",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Channel"
                }
            } })
    }
};
const ConnectionSetting = {
    type: {
        name: "Composite",
        className: "ConnectionSetting",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConnectionSettingProperties"
                }
            } })
    }
};
const AlexaChannel = {
    serializedName: "AlexaChannel",
    type: {
        name: "Composite",
        className: "AlexaChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AlexaChannelProperties"
                }
            } })
    }
};
const FacebookChannel = {
    serializedName: "FacebookChannel",
    type: {
        name: "Composite",
        className: "FacebookChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "FacebookChannelProperties"
                }
            } })
    }
};
const EmailChannel = {
    serializedName: "EmailChannel",
    type: {
        name: "Composite",
        className: "EmailChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "EmailChannelProperties"
                }
            } })
    }
};
const OutlookChannel = {
    serializedName: "OutlookChannel",
    type: {
        name: "Composite",
        className: "OutlookChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Channel.type.modelProperties)
    }
};
const MsTeamsChannel = {
    serializedName: "MsTeamsChannel",
    type: {
        name: "Composite",
        className: "MsTeamsChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MsTeamsChannelProperties"
                }
            } })
    }
};
const SkypeChannel = {
    serializedName: "SkypeChannel",
    type: {
        name: "Composite",
        className: "SkypeChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SkypeChannelProperties"
                }
            } })
    }
};
const KikChannel = {
    serializedName: "KikChannel",
    type: {
        name: "Composite",
        className: "KikChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "KikChannelProperties"
                }
            } })
    }
};
const WebChatChannel = {
    serializedName: "WebChatChannel",
    type: {
        name: "Composite",
        className: "WebChatChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "WebChatChannelProperties"
                }
            } })
    }
};
const DirectLineChannel = {
    serializedName: "DirectLineChannel",
    type: {
        name: "Composite",
        className: "DirectLineChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DirectLineChannelProperties"
                }
            } })
    }
};
const TelegramChannel = {
    serializedName: "TelegramChannel",
    type: {
        name: "Composite",
        className: "TelegramChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TelegramChannelProperties"
                }
            } })
    }
};
const SmsChannel = {
    serializedName: "SmsChannel",
    type: {
        name: "Composite",
        className: "SmsChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SmsChannelProperties"
                }
            } })
    }
};
const SlackChannel = {
    serializedName: "SlackChannel",
    type: {
        name: "Composite",
        className: "SlackChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SlackChannelProperties"
                }
            } })
    }
};
const LineChannel = {
    serializedName: "LineChannel",
    type: {
        name: "Composite",
        className: "LineChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LineChannelProperties"
                }
            } })
    }
};
const DirectLineSpeechChannel = {
    serializedName: "DirectLineSpeechChannel",
    type: {
        name: "Composite",
        className: "DirectLineSpeechChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DirectLineSpeechChannelProperties"
                }
            } })
    }
};
const Omnichannel = {
    serializedName: "Omnichannel",
    type: {
        name: "Composite",
        className: "Omnichannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Channel.type.modelProperties)
    }
};
const TelephonyChannel = {
    serializedName: "TelephonyChannel",
    type: {
        name: "Composite",
        className: "TelephonyChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Channel.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TelephonyChannelProperties"
                }
            } })
    }
};
const AcsChatChannel = {
    serializedName: "AcsChatChannel",
    type: {
        name: "Composite",
        className: "AcsChatChannel",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Channel.type.modelProperties)
    }
};
const SearchAssistant = {
    serializedName: "SearchAssistant",
    type: {
        name: "Composite",
        className: "SearchAssistant",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Channel.type.modelProperties)
    }
};
const M365Extensions = {
    serializedName: "M365Extensions",
    type: {
        name: "Composite",
        className: "M365Extensions",
        uberParent: "Channel",
        polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Channel.type.modelProperties)
    }
};
const WebChatSite = {
    type: {
        name: "Composite",
        className: "WebChatSite",
        modelProperties: Object.assign({}, Site.type.modelProperties)
    }
};
const DirectLineSite = {
    type: {
        name: "Composite",
        className: "DirectLineSite",
        modelProperties: Object.assign({}, Site.type.modelProperties)
    }
};
const ListChannelWithKeysResponse = {
    type: {
        name: "Composite",
        className: "ListChannelWithKeysResponse",
        modelProperties: Object.assign(Object.assign({}, BotChannel.type.modelProperties), { resource: {
                serializedName: "resource",
                type: {
                    name: "Composite",
                    className: "Channel"
                }
            }, setting: {
                serializedName: "setting",
                type: {
                    name: "Composite",
                    className: "ChannelSettings"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            }, entityTag: {
                serializedName: "entityTag",
                type: {
                    name: "String"
                }
            }, changedTime: {
                serializedName: "changedTime",
                type: {
                    name: "String"
                }
            } })
    }
};
let discriminators = {
    Channel: Channel,
    "Channel.AlexaChannel": AlexaChannel,
    "Channel.FacebookChannel": FacebookChannel,
    "Channel.EmailChannel": EmailChannel,
    "Channel.OutlookChannel": OutlookChannel,
    "Channel.MsTeamsChannel": MsTeamsChannel,
    "Channel.SkypeChannel": SkypeChannel,
    "Channel.KikChannel": KikChannel,
    "Channel.WebChatChannel": WebChatChannel,
    "Channel.DirectLineChannel": DirectLineChannel,
    "Channel.TelegramChannel": TelegramChannel,
    "Channel.SmsChannel": SmsChannel,
    "Channel.SlackChannel": SlackChannel,
    "Channel.LineChannel": LineChannel,
    "Channel.DirectLineSpeechChannel": DirectLineSpeechChannel,
    "Channel.Omnichannel": Omnichannel,
    "Channel.TelephonyChannel": TelephonyChannel,
    "Channel.AcsChatChannel": AcsChatChannel,
    "Channel.SearchAssistant": SearchAssistant,
    "Channel.M365Extensions": M365Extensions
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BotProperties: BotProperties,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    PrivateLinkResourceBase: PrivateLinkResourceBase,
    Resource: Resource,
    Sku: Sku,
    ErrorModel: ErrorModel,
    ErrorBody: ErrorBody,
    BotResponseList: BotResponseList,
    Channel: Channel,
    ChannelSettings: ChannelSettings,
    Site: Site,
    ChannelResponseList: ChannelResponseList,
    SiteInfo: SiteInfo,
    CreateEmailSignInUrlResponse: CreateEmailSignInUrlResponse,
    CreateEmailSignInUrlResponseProperties: CreateEmailSignInUrlResponseProperties,
    CheckNameAvailabilityRequestBody: CheckNameAvailabilityRequestBody,
    CheckNameAvailabilityResponseBody: CheckNameAvailabilityResponseBody,
    OperationEntityListResult: OperationEntityListResult,
    OperationEntity: OperationEntity,
    OperationDisplayInfo: OperationDisplayInfo,
    ServiceProviderResponseList: ServiceProviderResponseList,
    ServiceProvider: ServiceProvider,
    ServiceProviderProperties: ServiceProviderProperties,
    ServiceProviderParameter: ServiceProviderParameter,
    ServiceProviderParameterMetadata: ServiceProviderParameterMetadata,
    ServiceProviderParameterMetadataConstraints: ServiceProviderParameterMetadataConstraints,
    QnAMakerEndpointKeysRequestBody: QnAMakerEndpointKeysRequestBody,
    QnAMakerEndpointKeysResponse: QnAMakerEndpointKeysResponse,
    ConnectionSettingProperties: ConnectionSettingProperties,
    ConnectionSettingParameter: ConnectionSettingParameter,
    ConnectionSettingResponseList: ConnectionSettingResponseList,
    HostSettingsResponse: HostSettingsResponse,
    OperationResultsDescription: OperationResultsDescription,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    AlexaChannelProperties: AlexaChannelProperties,
    FacebookChannelProperties: FacebookChannelProperties,
    FacebookPage: FacebookPage,
    EmailChannelProperties: EmailChannelProperties,
    MsTeamsChannelProperties: MsTeamsChannelProperties,
    SkypeChannelProperties: SkypeChannelProperties,
    KikChannelProperties: KikChannelProperties,
    WebChatChannelProperties: WebChatChannelProperties,
    DirectLineChannelProperties: DirectLineChannelProperties,
    TelegramChannelProperties: TelegramChannelProperties,
    SmsChannelProperties: SmsChannelProperties,
    SlackChannelProperties: SlackChannelProperties,
    LineChannelProperties: LineChannelProperties,
    LineRegistration: LineRegistration,
    DirectLineSpeechChannelProperties: DirectLineSpeechChannelProperties,
    TelephonyChannelProperties: TelephonyChannelProperties,
    TelephonyPhoneNumbers: TelephonyPhoneNumbers,
    TelephonyChannelResourceApiConfiguration: TelephonyChannelResourceApiConfiguration,
    ConnectionItemName: ConnectionItemName,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateLinkResource: PrivateLinkResource,
    Bot: Bot,
    BotChannel: BotChannel,
    ConnectionSetting: ConnectionSetting,
    AlexaChannel: AlexaChannel,
    FacebookChannel: FacebookChannel,
    EmailChannel: EmailChannel,
    OutlookChannel: OutlookChannel,
    MsTeamsChannel: MsTeamsChannel,
    SkypeChannel: SkypeChannel,
    KikChannel: KikChannel,
    WebChatChannel: WebChatChannel,
    DirectLineChannel: DirectLineChannel,
    TelegramChannel: TelegramChannel,
    SmsChannel: SmsChannel,
    SlackChannel: SlackChannel,
    LineChannel: LineChannel,
    DirectLineSpeechChannel: DirectLineSpeechChannel,
    Omnichannel: Omnichannel,
    TelephonyChannel: TelephonyChannel,
    AcsChatChannel: AcsChatChannel,
    SearchAssistant: SearchAssistant,
    M365Extensions: M365Extensions,
    WebChatSite: WebChatSite,
    DirectLineSite: DirectLineSite,
    ListChannelWithKeysResponse: ListChannelWithKeysResponse,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Bot
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-09-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityRequestBody
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: BotChannel
};
const channelName = {
    parameterPath: "channelName",
    mapper: {
        serializedName: "channelName",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "AlexaChannel",
                "FacebookChannel",
                "EmailChannel",
                "KikChannel",
                "TelegramChannel",
                "SlackChannel",
                "MsTeamsChannel",
                "SkypeChannel",
                "WebChatChannel",
                "DirectLineChannel",
                "SmsChannel",
                "LineChannel",
                "DirectLineSpeechChannel",
                "OutlookChannel",
                "Omnichannel",
                "TelephonyChannel",
                "AcsChatChannel",
                "SearchAssistant",
                "M365Extensions"
            ]
        }
    }
};
const channelName1 = {
    parameterPath: "channelName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "channelName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: SiteInfo
};
const channelName2 = {
    parameterPath: "channelName",
    mapper: {
        serializedName: "channelName",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["WebChatChannel", "DirectLineChannel"]
        }
    }
};
const connectionName = {
    parameterPath: "connectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][\\sa-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2
        },
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: ConnectionSetting
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: QnAMakerEndpointKeysRequestBody
};
const operationResultId = {
    parameterPath: "operationResultId",
    mapper: {
        serializedName: "operationResultId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const properties2 = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnection
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Bots operations. */
class BotsImpl {
    /**
     * Initialize a new instance of the class Bots class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates a Bot Service. Bot Service is a resource group wide resource type.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, parameters, options }, createOperationSpec$3);
    }
    /**
     * Updates a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, updateOperationSpec$2);
    }
    /**
     * Deletes a Bot Service from the resource group.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, deleteOperationSpec$3);
    }
    /**
     * Returns a BotService specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getOperationSpec$6);
    }
    /**
     * Returns all the resources of a particular type belonging to a resource group
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Returns all the resources of a particular type belonging to a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * Check whether a bot name is available.
     * @param parameters The request body parameters to provide for the check name availability request
     * @param options The options parameters.
     */
    getCheckNameAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, getCheckNameAvailabilityOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Bot
        },
        201: {
            bodyMapper: Bot
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Bot
        },
        201: {
            bodyMapper: Bot
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: {
        parameterPath: {
            location: ["options", "location"],
            tags: ["options", "tags"],
            sku: ["options", "sku"],
            kind: ["options", "kind"],
            etag: ["options", "etag"],
            properties: ["options", "properties"]
        },
        mapper: Object.assign(Object.assign({}, Bot), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Bot
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BotResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BotResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$a
};
const getCheckNameAvailabilityOperationSpec = {
    path: "/providers/Microsoft.BotService/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResponseBody
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BotResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BotResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Channels operations. */
class ChannelsImpl {
    /**
     * Initialize a new instance of the class Channels class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, resourceName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, resourceName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, resourceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, channelName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, parameters, options }, createOperationSpec$2);
    }
    /**
     * Updates a Channel registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, updateOperationSpec$1);
    }
    /**
     * Deletes a Channel registration from a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, deleteOperationSpec$2);
    }
    /**
     * Returns a BotService Channel registration specified by the parameters.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Bot resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, getOperationSpec$5);
    }
    /**
     * Lists a Channel registration for a Bot Service including secrets
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource.
     * @param options The options parameters.
     */
    listWithKeys(resourceGroupName, resourceName, channelName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, options }, listWithKeysOperationSpec);
    }
    /**
     * Returns all the Channel registrations of a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BotChannel
        },
        201: {
            bodyMapper: BotChannel
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BotChannel
        },
        201: {
            bodyMapper: BotChannel
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: {
        parameterPath: {
            location: ["options", "location"],
            tags: ["options", "tags"],
            sku: ["options", "sku"],
            kind: ["options", "kind"],
            etag: ["options", "etag"],
            properties: ["options", "properties"]
        },
        mapper: Object.assign(Object.assign({}, BotChannel), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BotChannel
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listWithKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ListChannelWithKeysResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChannelResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChannelResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DirectLine operations. */
class DirectLineImpl {
    /**
     * Initialize a new instance of the class DirectLine class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Regenerates secret keys and returns them for the DirectLine Channel of a particular BotService
     * resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param channelName The name of the Channel resource for which keys are to be regenerated.
     * @param parameters The parameters to provide for the created bot.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, resourceName, channelName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, channelName, parameters, options }, regenerateKeysOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const regenerateKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/regeneratekeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BotChannel
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        channelName2
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Email operations. */
class EmailImpl {
    /**
     * Initialize a new instance of the class Email class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates an email channel sign in url for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    createSignInUrl(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, createSignInUrlOperationSpec);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createSignInUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/createEmailSignInUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CreateEmailSignInUrlResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available BotService operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available BotService operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.BotService/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BotConnection operations. */
class BotConnectionImpl {
    /**
     * Initialize a new instance of the class BotConnection class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByBotService(resourceGroupName, resourceName, options) {
        const iter = this.listByBotServicePagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBotServicePagingPage(resourceGroupName, resourceName, options, settings);
            }
        };
    }
    listByBotServicePagingPage(resourceGroupName, resourceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBotServicePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBotService(resourceGroupName, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBotServiceNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBotServicePagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBotServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBotServicePagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available Service Providers for creating Connection Settings
     * @param options The options parameters.
     */
    listServiceProviders(options) {
        return this.client.sendOperationRequest({ options }, listServiceProvidersOperationSpec);
    }
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    listWithSecrets(resourceGroupName, resourceName, connectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, connectionName, options }, listWithSecretsOperationSpec);
    }
    /**
     * Register a new Auth Connection for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for creating the Connection Setting.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, connectionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, connectionName, parameters, options }, createOperationSpec$1);
    }
    /**
     * Updates a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param parameters The parameters to provide for updating the Connection Setting.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, connectionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, connectionName, parameters, options }, updateOperationSpec);
    }
    /**
     * Get a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, connectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, connectionName, options }, getOperationSpec$4);
    }
    /**
     * Deletes a Connection Setting registration for a Bot Service
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param connectionName The name of the Bot Service Connection Setting resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, connectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, connectionName, options }, deleteOperationSpec$1);
    }
    /**
     * Returns all the Connection Settings registered to a particular BotService resource
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    _listByBotService(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listByBotServiceOperationSpec);
    }
    /**
     * ListByBotServiceNext
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param nextLink The nextLink from the previous successful call to the ListByBotService method.
     * @param options The options parameters.
     */
    _listByBotServiceNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, listByBotServiceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listServiceProvidersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ServiceProviderResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};
const listWithSecretsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}/listWithSecrets",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ConnectionSetting
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        connectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConnectionSetting
        },
        201: {
            bodyMapper: ConnectionSetting
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        connectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ConnectionSetting
        },
        201: {
            bodyMapper: ConnectionSetting
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        connectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConnectionSetting
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        connectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        connectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBotServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConnectionSettingResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBotServiceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConnectionSettingResponseList
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing QnAMakerEndpointKeys operations. */
class QnAMakerEndpointKeysImpl {
    /**
     * Initialize a new instance of the class QnAMakerEndpointKeys class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the QnA Maker endpoint keys
     * @param parameters The request body parameters to provide for the check name availability request
     * @param options The options parameters.
     */
    get(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listQnAMakerEndpointKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: QnAMakerEndpointKeysResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing HostSettings operations. */
class HostSettingsImpl {
    /**
     * Initialize a new instance of the class HostSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get per subscription settings needed to host bot in compute resource such as Azure App Service
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/hostSettings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostSettingsResponse
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationResults operations. */
class OperationResultsImpl {
    /**
     * Initialize a new instance of the class OperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param options The options parameters.
     */
    beginGet(operationResultId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { operationResultId, options }, getOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param options The options parameters.
     */
    beginGetAndWait(operationResultId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGet(operationResultId, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/operationresults/{operationResultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResultsDescription
        },
        201: {
            bodyMapper: OperationResultsDescription
        },
        202: {
            bodyMapper: OperationResultsDescription
        },
        204: {
            bodyMapper: OperationResultsDescription
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        operationResultId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the private endpoint connections associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, options) {
        const iter = this.listPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, resourceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, resourceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, resourceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the private endpoint connections associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listOperationSpec);
    }
    /**
     * Gets the specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec);
    }
    /**
     * Update the state of specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, privateEndpointConnectionName, properties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            properties,
            options
        }, createOperationSpec);
    }
    /**
     * Deletes the specified private endpoint connection associated with the Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            options
        }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    requestBody: properties2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the private link resources that need to be created for a Bot.
     * @param resourceGroupName The name of the Bot resource group in the user subscription.
     * @param resourceName The name of the Bot resource.
     * @param options The options parameters.
     */
    listByBotResource(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listByBotResourceOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBotResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: ErrorModel
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        resourceName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureBotService extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureBotService class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-botservice/4.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-09-15";
        this.bots = new BotsImpl(this);
        this.channels = new ChannelsImpl(this);
        this.directLine = new DirectLineImpl(this);
        this.email = new EmailImpl(this);
        this.operations = new OperationsImpl(this);
        this.botConnection = new BotConnectionImpl(this);
        this.qnAMakerEndpointKeys = new QnAMakerEndpointKeysImpl(this);
        this.hostSettings = new HostSettingsImpl(this);
        this.operationResults = new OperationResultsImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureBotService = AzureBotService;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
